# <!-- Powered by BMAD™ Core -->
template:
  id: architecture-template-v2
  name: Documento de Arquitetura
  version: 2.0
  output:
    format: markdown
    filename: docs/architecture.md
    title: "Documento de Arquitetura {{project_name}}"

workflow:
  mode: interactive
  elicitation: advanced-elicitation

sections:
  - id: introduction
    title: Introdução
    instruction: |
      Se disponíveis, revise quaisquer documentos relevantes fornecidos para coletar todo o contexto relevante antes de começar. Se no mínimo você não conseguir localizar docs/prd.md, pergunte ao usuário quais documentos fornecerão a base para a arquitetura.
    sections:
      - id: intro-content
        content: |
          Este documento delineia a arquitetura geral do projeto para {{project_name}}, incluindo sistemas backend, serviços compartilhados e preocupações não específicas de UI. Seu objetivo principal é servir como o projeto arquitetural orientador para desenvolvimento orientado por IA, garantindo consistência e aderência aos padrões e tecnologias escolhidos.

          **Relação com a Arquitetura Frontend:**
          Se o projeto incluir uma interface de usuário significativa, um Documento de Arquitetura Frontend separado detalhará o design específico do frontend e DEVE ser usado em conjunto com este documento. As escolhas da pilha tecnológica principal documentadas aqui (ver "Pilha Tecnológica") são definitivas para todo o projeto, incluindo quaisquer componentes frontend.
      - id: starter-template
        title: Template Inicial ou Projeto Existente
        instruction: |
          Antes de prosseguir com o design da arquitetura, verifique se o projeto é baseado em um template inicial ou codebase existente:

          1. Revise o PRD e brief de brainstorming para quaisquer menções de:
          - Templates iniciais (ex: Create React App, Next.js, Vue CLI, Angular CLI, etc.)
          - Projetos existentes ou codebases sendo usados como fundação
          - Projetos boilerplate ou ferramentas de scaffolding
          - Projetos anteriores para serem clonados ou adaptados

          2. Se um template inicial ou projeto existente for mencionado:
          - Peça ao usuário para fornecer acesso via um destes métodos:
            - Link para a documentação do template inicial
            - Upload/anexar os arquivos do projeto (para projetos pequenos)
            - Compartilhar um link para o repositório do projeto (GitHub, GitLab, etc.)
          - Analise o projeto inicial/existente para entender:
            - Pilha tecnológica pré-configurada e versões
            - Estrutura do projeto e padrões de organização
            - Scripts e ferramentas integrados
            - Padrões arquiteturais e convenções existentes
            - Quaisquer limitações ou restrições impostas pelo starter
          - Use esta análise para informar e alinhar suas decisões arquiteturais

          3. Se nenhum template inicial for mencionado, mas este é um projeto greenfield:
          - Sugira templates iniciais apropriados baseados nas preferências da pilha tecnológica
          - Explique os benefícios (configuração mais rápida, melhores práticas, suporte da comunidade)
          - Deixe o usuário decidir se quer usar um

          4. Se o usuário confirmar que nenhum template inicial será usado:
          - Prossiga com o design da arquitetura do zero
          - Note que configuração manual será necessária para todas as ferramentas e configuração

          Documente a decisão aqui antes de prosseguir com o design da arquitetura. Se nenhum, apenas diga N/A
        elicit: true
      - id: changelog
        title: Log de Mudanças
        type: table
        columns: [Data, Versão, Descrição, Autor]
        instruction: Rastrear versões e mudanças do documento

  - id: high-level-architecture
    title: Arquitetura de Alto Nível
    instruction: |
      Esta seção contém múltiplas subseções que estabelecem a fundação da arquitetura. Apresente todas as subseções juntas de uma vez.
    elicit: true
    sections:
      - id: technical-summary
        title: Resumo Técnico
        instruction: |
          Forneça uma visão geral breve (3-5 frases) de:
          - O estilo arquitetural geral do sistema
          - Componentes-chave e suas relações
          - Principais escolhas tecnológicas
          - Padrões arquiteturais principais sendo usados
          - Referência de volta aos objetivos do PRD e como esta arquitetura os suporta
      - id: high-level-overview
        title: Visão Geral de Alto Nível
        instruction: |
          Baseado na seção de Premissas Técnicas do PRD, descreva:

          1. O estilo arquitetural principal (ex: Monólito, Microsserviços, Serverless, Orientado a Eventos)
          2. Decisão da estrutura do repositório do PRD (Monorepo/Polyrepo)
          3. Decisão da arquitetura de serviço do PRD
          4. Fluxo de interação do usuário primário ou fluxo de dados em nível conceitual
          5. Principais decisões arquiteturais e sua justificativa
      - id: project-diagram
        title: Diagrama de Alto Nível do Projeto
        type: mermaid
        mermaid_type: graph
        instruction: |
          Crie um diagrama Mermaid que visualize a arquitetura de alto nível. Considere:
          - Limites do sistema
          - Componentes/serviços principais
          - Direções do fluxo de dados
          - Integrações externas
          - Pontos de entrada do usuário

      - id: architectural-patterns
        title: Padrões Arquiteturais e de Design
        instruction: |
          Liste os padrões de alto nível que guiarão a arquitetura. Para cada padrão:

          1. Apresente 2-3 opções viáveis se múltiplas existirem
          2. Forneça sua recomendação com justificativa clara
          3. Obtenha confirmação do usuário antes de finalizar
          4. Estes padrões devem se alinhar com as premissas técnicas do PRD e objetivos do projeto

          Padrões comuns a considerar:
          - Padrões de estilo arquitetural (Serverless, Orientado a Eventos, Microsserviços, CQRS, Hexagonal)
          - Padrões de organização de código (Injeção de Dependência, Repository, Module, Factory)
          - Padrões de dados (Event Sourcing, Saga, Database per Service)
          - Padrões de comunicação (REST, GraphQL, Message Queue, Pub/Sub)
        template: "- **{{pattern_name}}:** {{pattern_description}} - _Justificativa:_ {{rationale}}"
        examples:
          - "**Arquitetura Serverless:** Usando AWS Lambda para computação - _Justificativa:_ Alinha com requisito do PRD para otimização de custos e escalonamento automático"
          - "**Padrão Repository:** Abstrair lógica de acesso a dados - _Justificativa:_ Habilita testes e flexibilidade para migração futura de banco de dados"
          - "**Comunicação Orientada a Eventos:** Usando SNS/SQS para desacoplamento de serviços - _Justificativa:_ Suporta processamento assíncrono e resiliência do sistema"

  - id: tech-stack
    title: Pilha Tecnológica
    instruction: |
      Esta é a seção DEFINITIVA de seleção de tecnologia. Trabalhe com o usuário para fazer escolhas específicas:

      1. Revise as premissas técnicas do PRD e quaisquer preferências de .bmad-core/data/technical-preferences.yaml ou um technical-preferences anexado
      2. Para cada categoria, apresente 2-3 opções viáveis com prós/contras
      3. Faça uma recomendação clara baseada nas necessidades do projeto
      4. Obtenha aprovação explícita do usuário para cada seleção
      5. Documente versões exatas (evite "latest" - fixe versões específicas)
      6. Esta tabela é a única fonte da verdade - todos os outros documentos devem referenciar essas escolhas

      Decisões-chave para finalizar - antes de exibir a tabela, certifique-se de estar ciente ou pergunte ao usuário sobre - informe ao usuário se eles não tiverem certeza de algo que você também pode fornecer sugestões com justificativa:

      - Templates iniciais (se houver)
      - Linguagens e runtimes com versões exatas
      - Frameworks e bibliotecas / pacotes
      - Provedor de nuvem e escolhas de serviços-chave
      - Soluções de banco de dados e armazenamento - se não claro, sugira sql ou nosql ou outros tipos dependendo do projeto e dependendo do provedor de nuvem ofereça uma sugestão
      - Ferramentas de desenvolvimento

      Ao renderizar a tabela, certifique-se de que o usuário esteja ciente da importância das escolhas desta seção, também procure por lacunas ou discordâncias com qualquer coisa, peça por esclarecimentos se algo não estiver claro por que está na lista, e também obtenha feedback imediatamente - esta declaração e as opções devem ser renderizadas e então solicite antes de permitir entrada do usuário.
    elicit: true
    sections:
      - id: cloud-infrastructure
        title: Infraestrutura em Nuvem
        template: |
          - **Provedor:** {{cloud_provider}}
          - **Serviços-Chave:** {{core_services_list}}
          - **Regiões de Implantação:** {{regions}}
      - id: technology-stack-table
        title: Tabela da Pilha Tecnológica
        type: table
        columns: [Categoria, Tecnologia, Versão, Propósito, Justificativa]
        instruction: Preencha a tabela da pilha tecnológica com todas as tecnologias relevantes
        examples:
          - "| **Linguagem** | TypeScript | 5.3.3 | Linguagem de desenvolvimento principal | Tipagem forte, excelente ferramental, expertise da equipe |"
          - "| **Runtime** | Node.js | 20.11.0 | Runtime JavaScript | Versão LTS, performance estável, amplo ecossistema |"
          - "| **Framework** | NestJS | 10.3.2 | Framework backend | Pronto para enterprise, boa DI, corresponde aos padrões da equipe |"

  - id: data-models
    title: Modelos de Dados
    instruction: |
      Defina os modelos/entidades de dados principais:

      1. Revise os requisitos do PRD e identifique entidades de negócio-chave
      2. Para cada modelo, explique seu propósito e relacionamentos
      3. Inclua atributos-chave e tipos de dados
      4. Mostre relacionamentos entre modelos
      5. Discuta decisões de design com o usuário

      Crie um modelo conceitual claro antes de prosseguir para o esquema do banco de dados.
    elicit: true
    repeatable: true
    sections:
      - id: model
        title: "{{model_name}}"
        template: |
          **Propósito:** {{model_purpose}}

          **Atributos-Chave:**
          - {{attribute_1}}: {{type_1}} - {{description_1}}
          - {{attribute_2}}: {{type_2}} - {{description_2}}

          **Relacionamentos:**
          - {{relationship_1}}
          - {{relationship_2}}

  - id: components
    title: Componentes
    instruction: |
      Baseado nos padrões arquiteturais, pilha tecnológica e modelos de dados acima:

      1. Identifique componentes/serviços lógicos principais e suas responsabilidades
      2. Considere a estrutura do repositório (monorepo/polyrepo) do PRD
      3. Defina limites claros e interfaces entre componentes
      4. Para cada componente, especifique:
      - Responsabilidade primária
      - Interfaces/APIs-chave expostas
      - Dependências em outros componentes
      - Especificidades tecnológicas baseadas nas escolhas da pilha tecnológica

      5. Crie diagramas de componentes onde útil
    elicit: true
    sections:
      - id: component-list
        repeatable: true
        title: "{{component_name}}"
        template: |
          **Responsabilidade:** {{component_description}}

          **Interfaces-Chave:**
          - {{interface_1}}
          - {{interface_2}}

          **Dependências:** {{dependencies}}

          **Pilha Tecnológica:** {{component_tech_details}}
      - id: component-diagrams
        title: Diagramas de Componentes
        type: mermaid
        instruction: |
          Crie diagramas Mermaid para visualizar relacionamentos de componentes. Opções:
          - Diagrama C4 Container para visão de alto nível
          - Diagrama de componentes para estrutura interna detalhada
          - Diagramas de sequência para interações complexas
          Escolha o mais apropriado para clareza

  - id: external-apis
    title: APIs Externas
    condition: Projeto requer integrações de API externa
    instruction: |
      Para cada integração de serviço externo:

      1. Identifique APIs necessárias baseadas nos requisitos do PRD e design de componentes
      2. Se URLs de documentação são desconhecidas, peça especificidades ao usuário
      3. Documente métodos de autenticação e considerações de segurança
      4. Liste endpoints específicos que serão usados
      5. Note quaisquer limites de taxa ou restrições de uso

      Se nenhuma API externa for necessária, declare isso explicitamente e pule para a próxima seção.
    elicit: true
    repeatable: true
    sections:
      - id: api
        title: "API {{api_name}}"
        template: |
          - **Propósito:** {{api_purpose}}
          - **Documentação:** {{api_docs_url}}
          - **URL(s) Base:** {{api_base_url}}
          - **Autenticação:** {{auth_method}}
          - **Limites de Taxa:** {{rate_limits}}

          **Endpoints-Chave Usados:**
          - `{{method}} {{endpoint_path}}` - {{endpoint_purpose}}

          **Notas de Integração:** {{integration_considerations}}

  - id: core-workflows
    title: Fluxos de Trabalho Principais
    type: mermaid
    mermaid_type: sequence
    instruction: |
      Ilustre fluxos de trabalho-chave do sistema usando diagramas de sequência:

      1. Identifique jornadas críticas do usuário do PRD
      2. Mostre interações de componentes incluindo APIs externas
      3. Inclua caminhos de tratamento de erro
      4. Documente operações assíncronas
      5. Crie diagramas tanto de alto nível quanto detalhados conforme necessário

      Foque em fluxos de trabalho que esclarecem decisões arquiteturais ou interações complexas.
    elicit: true

  - id: rest-api-spec
    title: Especificação da API REST
    condition: Projeto inclui API REST
    type: code
    language: yaml
    instruction: |
      Se o projeto incluir uma API REST:

      1. Crie uma especificação OpenAPI 3.0
      2. Inclua todos os endpoints de épicos/histórias
      3. Defina esquemas de requisição/resposta baseados nos modelos de dados
      4. Documente requisitos de autenticação
      5. Inclua exemplos de requisições/respostas

      Use formato YAML para melhor legibilidade. Se não houver API REST, pule esta seção.
    elicit: true
    template: |
      openapi: 3.0.0
      info:
        title: {{api_title}}
        version: {{api_version}}
        description: {{api_description}}
      servers:
        - url: {{server_url}}
          description: {{server_description}}

  - id: database-schema
    title: Esquema do Banco de Dados
    instruction: |
      Transforme os modelos de dados conceituais em esquemas concretos de banco de dados:

      1. Use o(s) tipo(s) de banco de dados selecionado(s) na Pilha Tecnológica
      2. Crie definições de esquema usando notação apropriada
      3. Inclua índices, restrições e relacionamentos
      4. Considere performance e escalabilidade
      5. Para NoSQL, mostre estruturas de documentos

      Apresente o esquema em formato apropriado ao tipo de banco de dados (SQL DDL, esquema JSON, etc.)
    elicit: true

  - id: source-tree
    title: Árvore de Código-Fonte
    type: code
    language: plaintext
    instruction: |
      Crie uma estrutura de pastas do projeto que reflita:

      1. A estrutura de repositório escolhida (monorepo/polyrepo)
      2. A arquitetura de serviços (monólito/microsserviços/serverless)
      3. A pilha tecnológica e linguagens selecionadas
      4. Organização de componentes de cima
      5. Melhores práticas para os frameworks escolhidos
      6. Separação clara de responsabilidades

      Adapte a estrutura baseada nas necessidades do projeto. Para monorepos, mostre separação de serviços. Para serverless, mostre organização de funções. Inclua convenções específicas da linguagem.
    elicit: true
    examples:
      - |
        project-root/
        ├── packages/
        │   ├── api/                    # Serviço de API Backend
        │   ├── web/                    # Aplicação Frontend
        │   ├── shared/                 # Utilitários/tipos compartilhados
        │   └── infrastructure/         # Definições IaC
        ├── scripts/                    # Scripts de gerenciamento do monorepo
        └── package.json                # package.json raiz com workspaces

  - id: infrastructure-deployment
    title: Infraestrutura e Implantação
    instruction: |
      Defina a arquitetura de implantação e práticas:

      1. Use ferramenta IaC selecionada na Pilha Tecnológica
      2. Escolha estratégia de implantação apropriada para a arquitetura
      3. Defina ambientes e fluxo de promoção
      4. Estabeleça procedimentos de rollback
      5. Considere segurança, monitoramento e otimização de custos

      Obtenha entrada do usuário sobre preferências de implantação e escolhas de ferramentas CI/CD.
    elicit: true
    sections:
      - id: infrastructure-as-code
        title: Infraestrutura como Código
        template: |
          - **Ferramenta:** {{iac_tool}} {{version}}
          - **Localização:** `{{iac_directory}}`
          - **Abordagem:** {{iac_approach}}
      - id: deployment-strategy
        title: Estratégia de Implantação
        template: |
          - **Estratégia:** {{deployment_strategy}}
          - **Plataforma CI/CD:** {{cicd_platform}}
          - **Configuração de Pipeline:** `{{pipeline_config_location}}`
      - id: environments
        title: Ambientes
        repeatable: true
        template: "- **{{env_name}}:** {{env_purpose}} - {{env_details}}"
      - id: promotion-flow
        title: Fluxo de Promoção de Ambiente
        type: code
        language: text
        template: "{{promotion_flow_diagram}}"
      - id: rollback-strategy
        title: Estratégia de Rollback
        template: |
          - **Método Principal:** {{rollback_method}}
          - **Condições de Acionamento:** {{rollback_triggers}}
          - **Objetivo de Tempo de Recuperação:** {{rto}}

  - id: error-handling-strategy
    title: Estratégia de Tratamento de Erros
    instruction: |
      Defina abordagem abrangente de tratamento de erros:

      1. Escolha padrões apropriados para a linguagem/framework da Pilha Tecnológica
      2. Defina padrões de logging e ferramentas
      3. Estabeleça categorias de erro e regras de tratamento
      4. Considere observabilidade e necessidades de depuração
      5. Garanta segurança (sem dados sensíveis em logs)

      Esta seção orienta tanto desenvolvedores IA quanto humanos no tratamento consistente de erros.
    elicit: true
    sections:
      - id: general-approach
        title: Abordagem Geral
        template: |
          - **Modelo de Erro:** {{error_model}}
          - **Hierarquia de Exceções:** {{exception_structure}}
          - **Propagação de Erro:** {{propagation_rules}}
      - id: logging-standards
        title: Padrões de Logging
        template: |
          - **Biblioteca:** {{logging_library}} {{version}}
          - **Formato:** {{log_format}}
          - **Níveis:** {{log_levels_definition}}
          - **Contexto Obrigatório:**
            - ID de Correlação: {{correlation_id_format}}
            - Contexto do Serviço: {{service_context}}
            - Contexto do Usuário: {{user_context_rules}}
      - id: error-patterns
        title: Padrões de Tratamento de Erros
        sections:
          - id: external-api-errors
            title: Erros de API Externa
            template: |
              - **Política de Retry:** {{retry_strategy}}
              - **Circuit Breaker:** {{circuit_breaker_config}}
              - **Configuração de Timeout:** {{timeout_settings}}
              - **Tradução de Erro:** {{error_mapping_rules}}
          - id: business-logic-errors
            title: Erros de Lógica de Negócio
            template: |
              - **Exceções Customizadas:** {{business_exception_types}}
              - **Erros Voltados ao Usuário:** {{user_error_format}}
              - **Códigos de Erro:** {{error_code_system}}
          - id: data-consistency
            title: Consistência de Dados
            template: |
              - **Estratégia de Transação:** {{transaction_approach}}
              - **Lógica de Compensação:** {{compensation_patterns}}
              - **Idempotência:** {{idempotency_approach}}

  - id: coding-standards
    title: Padrões de Codificação
    instruction: |
      Estes padrões são OBRIGATÓRIOS para agentes IA. Trabalhe com o usuário para definir APENAS as regras críticas necessárias para prevenir código ruim. Explique que:

      1. Esta seção controla diretamente o comportamento do desenvolvedor IA
      2. Mantenha mínimo - assuma que IA conhece melhores práticas gerais
      3. Foque em convenções específicas do projeto e pegadinhas
      4. Padrões excessivamente detalhados incham o contexto e desaceleram o desenvolvimento
      5. Padrões serão extraídos para arquivo separado para uso do agente dev

      Para cada padrão, obtenha confirmação explícita do usuário de que é necessário.
    elicit: true
    sections:
      - id: core-standards
        title: Padrões Principais
        template: |
          - **Linguagens & Runtimes:** {{languages_and_versions}}
          - **Estilo & Linting:** {{linter_config}}
          - **Organização de Testes:** {{test_file_convention}}
      - id: naming-conventions
        title: Convenções de Nomenclatura
        type: table
        columns: [Elemento, Convenção, Exemplo]
        instruction: Inclua apenas se desviando dos padrões da linguagem
      - id: critical-rules
        title: Regras Críticas
        instruction: |
          Liste APENAS regras que IA pode violar ou requisitos específicos do projeto. Exemplos:
          - "Nunca use console.log em código de produção - use logger"
          - "Todas as respostas da API devem usar o tipo wrapper ApiResponse"
          - "Consultas de banco de dados devem usar padrão repository, nunca ORM direto"

          Evite regras óbvias como "use princípios SOLID" ou "escreva código limpo"
        repeatable: true
        template: "- **{{rule_name}}:** {{rule_description}}"
      - id: language-specifics
        title: Diretrizes Específicas da Linguagem
        condition: Regras específicas da linguagem críticas necessárias
        instruction: Adicione APENAS se crítico para prevenir erros da IA. A maioria das equipes não precisa desta seção.
        sections:
          - id: language-rules
            title: "Especificidades de {{language_name}}"
            repeatable: true
            template: "- **{{rule_topic}}:** {{rule_detail}}"

  - id: test-strategy
    title: Estratégia e Padrões de Teste
    instruction: |
      Trabalhe com o usuário para definir estratégia abrangente de teste:

      1. Use frameworks de teste da Pilha Tecnológica
      2. Decida sobre abordagem TDD vs teste-depois
      3. Defina organização e nomenclatura de testes
      4. Estabeleça objetivos de cobertura
      5. Determine infraestrutura de teste de integração
      6. Planeje para dados de teste e dependências externas

      Nota: Informações básicas vão nos Padrões de Codificação para agente dev. Esta seção detalhada é para agente QA e referência da equipe.
    elicit: true
    sections:
      - id: testing-philosophy
        title: Filosofia de Teste
        template: |
          - **Abordagem:** {{test_approach}}
          - **Objetivos de Cobertura:** {{coverage_targets}}
          - **Pirâmide de Teste:** {{test_distribution}}
      - id: test-types
        title: Tipos e Organização de Teste
        sections:
          - id: unit-tests
            title: Testes Unitários
            template: |
              - **Framework:** {{unit_test_framework}} {{version}}
              - **Convenção de Arquivo:** {{unit_test_naming}}
              - **Localização:** {{unit_test_location}}
              - **Biblioteca de Mock:** {{mocking_library}}
              - **Requisito de Cobertura:** {{unit_coverage}}

              **Requisitos do Agente IA:**
              - Gerar testes para todos os métodos públicos
              - Cobrir casos extremos e condições de erro
              - Seguir padrão AAA (Arrange, Act, Assert)
              - Mockar todas as dependências externas
          - id: integration-tests
            title: Testes de Integração
            template: |
              - **Escopo:** {{integration_scope}}
              - **Localização:** {{integration_test_location}}
              - **Infraestrutura de Teste:**
                - **{{dependency_name}}:** {{test_approach}} ({{test_tool}})
            examples:
              - "**Banco de Dados:** H2 em memória para testes unitários, Testcontainers PostgreSQL para integração"
              - "**Fila de Mensagens:** Kafka embarcado para testes"
              - "**APIs Externas:** WireMock para stubbing"
          - id: e2e-tests
            title: Testes End-to-End
            template: |
              - **Framework:** {{e2e_framework}} {{version}}
              - **Escopo:** {{e2e_scope}}
              - **Ambiente:** {{e2e_environment}}
              - **Dados de Teste:** {{e2e_data_strategy}}
      - id: test-data-management
        title: Gerenciamento de Dados de Teste
        template: |
          - **Estratégia:** {{test_data_approach}}
          - **Fixtures:** {{fixture_location}}
          - **Factories:** {{factory_pattern}}
          - **Limpeza:** {{cleanup_strategy}}
      - id: continuous-testing
        title: Teste Contínuo
        template: |
          - **Integração CI:** {{ci_test_stages}}
          - **Testes de Performance:** {{perf_test_approach}}
          - **Testes de Segurança:** {{security_test_approach}}

  - id: security
    title: Segurança
    instruction: |
      Defina requisitos de segurança OBRIGATÓRIOS para desenvolvedores IA e humanos:

      1. Foque em regras específicas de implementação
      2. Referencie ferramentas de segurança da Pilha Tecnológica
      3. Defina padrões claros para cenários comuns
      4. Essas regras impactam diretamente a geração de código
      5. Trabalhe com o usuário para garantir completude sem redundância
    elicit: true
    sections:
      - id: input-validation
        title: Validação de Entrada
        template: |
          - **Biblioteca de Validação:** {{validation_library}}
          - **Localização da Validação:** {{where_to_validate}}
          - **Regras Obrigatórias:**
            - Todas as entradas externas DEVEM ser validadas
            - Validação no limite da API antes do processamento
            - Abordagem whitelist preferida sobre blacklist
      - id: auth-authorization
        title: Autenticação e Autorização
        template: |
          - **Método de Auth:** {{auth_implementation}}
          - **Gerenciamento de Sessão:** {{session_approach}}
          - **Padrões Obrigatórios:**
            - {{auth_pattern_1}}
            - {{auth_pattern_2}}
      - id: secrets-management
        title: Gerenciamento de Segredos
        template: |
          - **Desenvolvimento:** {{dev_secrets_approach}}
          - **Produção:** {{prod_secrets_service}}
          - **Requisitos de Código:**
            - NUNCA hardcode segredos
            - Acesso apenas via serviço de configuração
            - Sem segredos em logs ou mensagens de erro
      - id: api-security
        title: Segurança da API
        template: |
          - **Rate Limiting:** {{rate_limit_implementation}}
          - **Política CORS:** {{cors_configuration}}
          - **Headers de Segurança:** {{required_headers}}
          - **Imposição HTTPS:** {{https_approach}}
      - id: data-protection
        title: Proteção de Dados
        template: |
          - **Criptografia em Repouso:** {{encryption_at_rest}}
          - **Criptografia em Trânsito:** {{encryption_in_transit}}
          - **Tratamento de PII:** {{pii_rules}}
          - **Restrições de Logging:** {{what_not_to_log}}
      - id: dependency-security
        title: Segurança de Dependências
        template: |
          - **Ferramenta de Escaneamento:** {{dependency_scanner}}
          - **Política de Atualização:** {{update_frequency}}
          - **Processo de Aprovação:** {{new_dep_process}}
      - id: security-testing
        title: Teste de Segurança
        template: |
          - **Ferramenta SAST:** {{static_analysis}}
          - **Ferramenta DAST:** {{dynamic_analysis}}
          - **Teste de Penetração:** {{pentest_schedule}}

  - id: checklist-results
    title: Relatório de Resultados do Checklist
    instruction: Antes de executar o checklist, ofereça para produzir o documento completo de arquitetura. Uma vez que o usuário confirme, execute o architect-checklist e preencha os resultados aqui.

  - id: next-steps
    title: Próximos Passos
    instruction: |
      Após completar a arquitetura:

      1. Se o projeto tem componentes de UI:
      - Use "Modo de Arquitetura Frontend"
      - Forneça este documento como entrada

      2. Para todos os projetos:
      - Revise com Product Owner
      - Comece implementação de histórias com agente Dev
      - Configure infraestrutura com agente DevOps

      3. Inclua prompts específicos para próximos agentes se necessário
    sections:
      - id: architect-prompt
        title: Prompt do Arquiteto
        condition: Projeto tem componentes de UI
        instruction: |
          Crie um prompt breve para entregar ao Arquiteto para criação de Arquitetura Frontend. Inclua:
          - Referência a este documento de arquitetura
          - Requisitos-chave de UI do PRD
          - Quaisquer decisões específicas de frontend feitas aqui
          - Solicitação para arquitetura frontend detalhada