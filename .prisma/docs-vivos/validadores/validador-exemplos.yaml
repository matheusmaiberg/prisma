# Validador de Exemplos - Living Documentation PRISMA

versao: 1.0.0
tipo: validador-exemplos
ativo: true

# Configuração do Validador
configuracao:
  # Tipos de código suportados
  linguagens:
    typescript:
      extensoes: [.ts, .tsx]
      comando_teste: "npx tsx"
      timeout_ms: 5000

    javascript:
      extensoes: [.js, .jsx]
      comando_teste: "node"
      timeout_ms: 5000

    python:
      extensoes: [.py]
      comando_teste: "python"
      timeout_ms: 5000

    bash:
      extensoes: [.sh]
      comando_teste: "bash"
      timeout_ms: 10000

  # Padrões de marcação
  marcadores:
    inicio_bloco: "<!-- PRISMA:teste -->"
    fim_bloco: "<!-- /PRISMA:teste -->"
    expect: "// PRISMA:expect"
    ignore: "// PRISMA:ignore"
    timeout: "// PRISMA:timeout="

# Estratégias de Validação
estrategias:
  # Para código com expectativas
  com_expectativa:
    - extrair_codigo
    - extrair_expects
    - executar_codigo
    - comparar_resultado
    - validar_tipos

  # Para código sem expectativas
  sem_expectativa:
    - extrair_codigo
    - verificar_sintaxe
    - executar_codigo
    - verificar_sem_erro

  # Para comandos CLI
  comando_cli:
    - extrair_comando
    - executar_shell
    - capturar_output
    - validar_padrao

# Regras de Validação
regras:
  # Exemplos TypeScript/JavaScript
  typescript_rules:
    deve_compilar: true
    deve_passar_lint: true
    deve_ter_tipos: true
    sem_any: true
    sem_console_log: false  # Permitido em exemplos

  # Exemplos de Comando
  comando_rules:
    deve_existir: true
    deve_retornar_0: true
    timeout_max: 30000
    pode_sudo: false

  # Exemplos Python
  python_rules:
    deve_passar_pep8: true
    deve_ter_docstring: false  # Opcional em exemplos
    sem_print_debug: true

# Tratamento de Falhas
falhas:
  # Ações por tipo de falha
  sintaxe:
    acao: corrigir_formatacao
    notificar: true
    bloquear_commit: true

  execucao:
    acao: marcar_quebrado
    notificar: true
    bloquear_commit: false
    sugerir_fix: true

  expectativa:
    acao: atualizar_output
    notificar: true
    bloquear_commit: false
    mostrar_diff: true

  timeout:
    acao: aumentar_limite
    notificar: false
    bloquear_commit: false
    log: true

# Cache de Resultados
cache:
  habilitado: true
  ttl_segundos: 3600
  invalida_em:
    - mudanca_arquivo
    - mudanca_deps
    - mudanca_config

# Relatórios
relatorios:
  # Formato do relatório
  formato:
    - resumo_total
    - falhas_detalhadas
    - sugestoes_correcao
    - metricas_performance

  # Destinos
  output:
    terminal: true
    arquivo: .prisma/reports/validacao-exemplos.md
    dashboard: true

  # Métricas coletadas
  metricas:
    - total_exemplos
    - exemplos_validos
    - exemplos_quebrados
    - tempo_total_validacao
    - taxa_sucesso
    - exemplos_por_linguagem

# Exemplos de Validação (meta!)
exemplos:
  # Exemplo válido
  exemplo_valido: |
    ```typescript
    // PRISMA:teste
    function somar(a: number, b: number): number {
      return a + b
    }

    // PRISMA:expect
    console.log(somar(2, 3)) // => 5
    console.log(somar(-1, 1)) // => 0
    ```

  # Exemplo com timeout customizado
  exemplo_timeout: |
    ```bash
    // PRISMA:timeout=60000
    npm install && npm run build
    // PRISMA:expect
    // Build successful
    ```

  # Exemplo ignorado
  exemplo_ignorado: |
    ```python
    // PRISMA:ignore - Exemplo ilustrativo apenas
    import requests
    response = requests.get("http://api.example.com")
    ```

# Comandos CLI
comandos:
  validar_todos: "/prisma docs validar-exemplos"
  validar_arquivo: "/prisma docs validar-exemplos [arquivo]"
  corrigir_auto: "/prisma docs corrigir-exemplos"
  relatorio: "/prisma docs relatorio-exemplos"

# Integração com CI/CD
ci_cd:
  github_actions:
    on: [push, pull_request]
    job: validar-documentacao
    fail_fast: false

  pre_commit_hook: |
    #!/bin/bash
    /prisma docs validar-exemplos --changed-only

  quality_gate:
    min_taxa_sucesso: 95
    max_exemplos_quebrados: 2