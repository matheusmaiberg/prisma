# Comandos do Diretor PRISMA - Universal Agent Framework Integrado
# Mapeamento completo de comandos e suas ações

versao: 2.0.0
tipo: comandos-diretor-universal
agente: diretor

# Universal Agent Framework - Integração
universal_framework:
  limite_tokens_resposta: 500
  scoring_enabled: true
  auto_delegation: true

# Comandos Principais
comandos:
  # Inicialização e Status
  inicializacao:
    iniciar:
      aliases: [init, start, começar]
      descricao: "Inicializa o PRISMA e ativa o Diretor"
      acoes:
        - detectar_contexto
        - carregar_estado
        - mostrar_dashboard
        - aguardar_comando

    status:
      aliases: [estado, info]
      descricao: "Mostra estado completo do sistema"
      acoes:
        - coletar_metricas
        - verificar_agentes
        - mostrar_dashboard_completo

    ajuda:
      aliases: [help, comandos, ?]
      descricao: "Lista todos os comandos disponíveis"
      acoes:
        - listar_comandos_diretor
        - listar_agentes_disponiveis
        - mostrar_exemplos

  # Gestão de Projeto
  projeto:
    novo:
      aliases: [new, criar, create]
      parametros: [tipo_projeto]
      descricao: "Inicia novo projeto com workflow apropriado"
      acoes:
        - detectar_tipo_projeto
        - escolher_workflow
        - criar_estrutura_inicial
        - ativar_agentes_necessarios

    analisar:
      aliases: [analyze, analyse, examinar]
      descricao: "Análise profunda do projeto atual"
      acoes:
        - escanear_arquivos
        - detectar_tecnologias
        - identificar_padroes
        - gerar_relatorio_analise

    recomendar:
      aliases: [recommend, sugerir, suggest]
      descricao: "Sugere próximos passos baseado em contexto"
      acoes:
        - analisar_estado_atual
        - identificar_gaps
        - priorizar_tarefas
        - apresentar_recomendacoes

  # Delegação Universal Framework
  delegacao:
    fazer:
      aliases: [do, executar, execute, realizar]
      parametros: [descricao_tarefa]
      descricao: "Analisa tarefa e delega automaticamente com scoring"
      acoes:
        - analisar_complexidade
        - calcular_scoring_agentes  # NOVO: Universal Framework
        - selecionar_agente_otimo   # NOVO: Baseado em score
        - preparar_contexto_comprimido  # NOVO: ≤200 tokens
        - delegar_com_monitoring
        - atualizar_performance_scores  # NOVO: Aprendizado

    auto-score:  # NOVO COMANDO
      aliases: [score, avaliar-agentes, rank]
      parametros: [descricao_tarefa]
      descricao: "Mostra scoring de agentes para uma tarefa"
      acoes:
        - analisar_requisitos_tarefa
        - calcular_scores_todos_agentes
        - mostrar_ranking_agentes
        - explicar_criterios_selecao

    universal:   # NOVO COMANDO
      aliases: [framework, uf, sistema]
      parametros_opcionais: [acao]
      descricao: "Controla Universal Agent Framework"
      acoes:
        - mostrar_status_framework
        - configurar_parametros
        - resetar_performance_scores
        - mostrar_estatisticas_delegacao

    agente:
      aliases: [agent, chamar, call]
      parametros: [tipo_agente, comando_agente]
      descricao: "Delega comando específico para agente"
      acoes:
        - validar_agente_existe
        - passar_contexto
        - executar_comando_agente
        - retornar_resultado

    pipeline:
      aliases: [workflow, fluxo, flow]
      parametros: [nome_workflow]
      descricao: "Executa workflow completo"
      acoes:
        - carregar_workflow
        - validar_pre_requisitos
        - executar_sequencia
        - validar_checkpoints

  # Monitoramento
  monitoramento:
    progresso:
      aliases: [progress, andamento]
      descricao: "Mostra estado de todas as tarefas"
      acoes:
        - listar_tarefas_ativas
        - mostrar_percentual_conclusao
        - identificar_bloqueios
        - estimar_tempo_restante

    metricas:
      aliases: [metrics, kpis, indicadores]
      descricao: "Dashboard de métricas do projeto"
      acoes:
        - calcular_velocity
        - medir_qualidade
        - avaliar_satisfacao
        - gerar_graficos

    historico:
      aliases: [history, timeline, log]
      parametros_opcionais: [filtro, periodo]
      descricao: "Timeline de eventos e decisões"
      acoes:
        - buscar_eventos
        - filtrar_por_criterio
        - formatar_timeline
        - destacar_decisoes_importantes

  # Controle Avançado
  controle:
    parar:
      aliases: [stop, halt, pausar]
      parametros_opcionais: [tarefa_id]
      descricao: "Para execução de tarefa ou todas"
      acoes:
        - identificar_alvo
        - salvar_checkpoint
        - parar_execucao
        - notificar_agentes

    retomar:
      aliases: [resume, continue, continuar]
      parametros_opcionais: [checkpoint_id]
      descricao: "Retoma execução pausada"
      acoes:
        - carregar_checkpoint
        - restaurar_contexto
        - retomar_pipeline
        - sincronizar_agentes

    reverter:
      aliases: [rollback, undo, desfazer]
      parametros: [ponto_reversao]
      descricao: "Reverte para estado anterior"
      acoes:
        - validar_ponto_existe
        - criar_backup_atual
        - aplicar_reversao
        - notificar_mudancas

  # Aprendizado e Otimização
  inteligencia:
    aprender:
      aliases: [learn, treinar]
      parametros_opcionais: [tipo_padrao]
      descricao: "Aprende com execuções anteriores"
      acoes:
        - analisar_historico
        - identificar_padroes
        - otimizar_processos
        - salvar_aprendizados

    otimizar:
      aliases: [optimize, melhorar]
      parametros_opcionais: [area]
      descricao: "Otimiza workflows e processos"
      acoes:
        - identificar_gargalos
        - sugerir_melhorias
        - implementar_otimizacoes
        - medir_impacto

# Fluxos de Decisão Universal Framework
fluxos_decisao:
  escolher_agente_universal:
    entrada: [tipo_tarefa, contexto, estado_agentes]
    algoritmo_scoring:
      1: "Extrair required_skills da tarefa"
      2: "Para cada agente: calcular capability_match"
      3: "Para cada agente: calcular availability_score"
      4: "Para cada agente: obter recent_performance"
      5: "Para cada agente: calcular context_relevance"
      6: "Aplicar weighted average com pesos configurados"
      7: "Ordenar agentes por score descrescente"
      8: "Se melhor_score >= threshold: selecionar"
      9: "Senão: executar_diretamente"

    mapeamento_especialidades:
      sarah-product-owner: ["requisitos", "valor_negocio", "priorização", "critérios_aceitação", "backlog", "stakeholders"]
      james-developer: ["implementação", "código", "debug", "testes_unitários", "refactoring", "deployment"]
      bob-scrum-master: ["histórias", "planning", "coordenação", "workflows", "sprints", "retrospectivas"]
      quinn-qa: ["qualidade", "testes", "riscos", "gates", "nfr", "automação", "cobertura"]
      winston-arquiteto: ["arquitetura", "design", "adr", "decisões_técnicas", "padrões", "escalabilidade"]

    fallback_tradicional:
      regras:
        - se: "contém 'requisito' ou 'prd' ou 'negócio'"
          entao: sarah-product-owner
        - se: "contém 'implementar' ou 'código' ou 'desenvolver'"
          entao: james-developer
        - se: "contém 'história' ou 'épico' ou 'planning'"
          entao: bob-scrum-master
        - se: "contém 'testar' ou 'qualidade' ou 'risco'"
          entao: quinn-qa
        - se: "contém 'arquitetura' ou 'design' ou 'adr'"
          entao: winston-arquiteto
        - senao: executar_diretamente

  priorizar_tarefa:
    entrada: lista_tarefas
    criterios:
      - impacto_negocio: peso_40
      - complexidade: peso_20
      - dependencias: peso_25
      - risco: peso_15
    saida: lista_priorizada

# Respostas Padrão
respostas:
  inicializacao: |
    🎬 ALAN DIRETOR PRISMA ATIVADO

    📊 Status do Sistema:
    ✅ Event Store: Online
    ✅ Context Engine: Pronto
    ✅ Agentes: {count} disponíveis

    Como posso ajudar hoje?

  tarefa_recebida: |
    🎬 Analisando tarefa...

    📋 Complexidade: {nivel}
    👥 Agentes necessários: {agentes}
    ⏱️  Tempo estimado: {tempo}

    Iniciando execução...

  erro_recuperavel: |
    ⚠️ Encontrei um problema: {erro}

    🔄 Tentando alternativa...
    💡 Sugestão: {sugestao}

  sucesso: |
    ✅ Tarefa concluída com sucesso!

    📊 Métricas:
    ⏱️  Tempo: {tempo}
    👥 Agentes usados: {agentes}
    📈 Qualidade: {qualidade}

# Validações
validacoes:
  pre_execucao:
    - contexto_carregado
    - agentes_disponiveis
    - sem_conflitos_recurso

  pos_execucao:
    - resultado_valido
    - metricas_coletadas
    - estado_salvo

# Métricas Coletadas
metricas:
  por_comando:
    - tempo_execucao
    - taxa_sucesso
    - agentes_utilizados

  por_sessao:
    - comandos_executados
    - tarefas_completadas
    - erros_recuperados

  por_projeto:
    - velocity
    - qualidade_codigo
    - satisfacao_usuario